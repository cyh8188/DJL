plugins {
    id "java"
    id 'application'
}

repositories {
    jcenter()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation "commons-cli:commons-cli:1.4"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:2.12.1"
    implementation "com.google.code.gson:gson:2.8.5"
    implementation "ai.djl:api:0.3.0-SNAPSHOT"
    implementation "ai.djl:basicdataset:0.3.0-SNAPSHOT"
    implementation "ai.djl:model-zoo:0.3.0-SNAPSHOT"
    implementation "ai.djl.mxnet:mxnet-model-zoo:0.3.0-SNAPSHOT"

    runtimeOnly "ai.djl.mxnet:${getMXNetNativeLib()}"

    testImplementation 'org.testng:testng:6.14.3'
}

test {
    maxHeapSize = "1024m"

    useTestNG()
}

application {
    mainClassName = System.getProperty("main", "ai.djl.examples.inference.ObjectDetection")
}

run {
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
}

tasks.distTar.enabled = false

import java.util.regex.Matcher
import java.util.regex.Pattern

def getMXNetNativeLib() {
    String osName = System.getProperty("os.name")
    if (osName.startsWith("Mac")) {
        return "mxnet-native-mkl:1.6.0-b-SNAPSHOT:osx-x86_64"
    }

    String osPrefix;
    if (osName.startsWith("Win")) {
        osPrefix = "win"
    } else if (osName.startsWith("Linux")) {
        osPrefix = "linux"
    } else {
        throw new GradleException("Unsupported os: " + osName)
    }

    try {
        exec {
            commandLine "nvidia-smi", "-L"
            standardOutput = new ByteArrayOutputStream()
        }

        ByteArrayOutputStream out = new ByteArrayOutputStream()
        exec {
            commandLine "nvcc", "--version"
            standardOutput = out
        }

        String output = out.toString("UTF-8")
        Pattern pattern = Pattern.compile("release (\\d\\d?\\.\\d), V");
        Matcher m = pattern.matcher(output)
        if (!m.find()) {
            logger.log(LogLevel.ERROR, "Unexpected output: " + output)
        } else {
            String nvccVersion = m.group(1)
            if (nvccVersion == "10.1") {
                return "mxnet-native-cu101mkl:1.6.0-b-SNAPSHOT:${osPrefix}-x86_64"
            } else if (nvccVersion == "9.2") {
                return "mxnet-native-cu92mkl:1.6.0-b-SNAPSHOT:${osPrefix}-x86_64"
            } else {
                logger.log(LogLevel.WARN, "Unsupported cuda version: " + nvccVersion)
            }
        }
    } catch (Exception e) {
        logger.debug("No cuda is detected");
    }

    return "mxnet-native-mkl:1.6.0-b-SNAPSHOT:${osPrefix}-x86_64"
}
