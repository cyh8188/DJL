plugins {
    id 'application'
    id 'jacoco'
}

dependencies {
    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4j_slf4j_version}"
    implementation project(":basicdataset")
    implementation project(":model-zoo")
    implementation project(":testing")

    runtimeOnly project(":engines:mxnet:mxnet-model-zoo")
    runtimeOnly project(":engines:pytorch:pytorch-model-zoo")
    runtimeOnly project(":engines:pytorch:pytorch-jni")
    runtimeOnly project(":engines:tensorflow:tensorflow-model-zoo")
    runtimeOnly project(":engines:ml:xgboost")
    runtimeOnly project(":engines:ml:lightgbm")
    runtimeOnly project(":engines:onnxruntime:onnxruntime-engine")

    if (System.getProperty("ai.djl.default_engine") == "TFLite") {
        runtimeOnly project(":engines:tflite:tflite-engine")
    } else if (System.getProperty("ai.djl.default_engine") == "DLR") {
        runtimeOnly project(":engines:dlr:dlr-engine")
    } else if (System.getProperty("ai.djl.default_engine") == "PaddlePaddle") {
        runtimeOnly project(":engines:paddlepaddle:paddlepaddle-model-zoo")
    }
}

java {
    compileJava {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
        options.compilerArgs.removeAll(["--release", "8"])
    }
}

task copyDependencies(type: Copy) {
    into "build/dependencies"
    from configurations.runtimeClasspath
}

application {
    mainClass = System.getProperty("main", "ai.djl.integration.IntegrationTest")
}

run {
    environment("TF_CPP_MIN_LOG_LEVEL", "1") // turn off TensorFlow print out
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperty("file.encoding", "UTF-8")
    jvmArgs "-Xverify:none"
}

jacocoTestReport {
    group = "Reporting"

    javaProjects().each { p ->
        if ([":api", ":basicdataset"].contains(p.getPath())) {
            additionalSourceDirs files((Set<File>) p.sourceSets.main.allJava.srcDirs)
            additionalClassDirs((FileCollection) p.sourceSets.main.output)
        }
    }

    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/ai/djl/integration/**"])
        })
    }

    reports {
        xml.required = true
        csv.required = false
    }

    // Work-around to allow us to build list of executionData files in doFirst
    onlyIf = {
        true
    }
}

task debugEnv(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    systemProperties System.getProperties()
    systemProperties.remove("user.dir")
    systemProperties.put("ai.djl.logging.level", "debug")
    mainClass = "ai.djl.integration.util.DebugEnvironment"
}

tasks.distTar.enabled = false
test.finalizedBy project.tasks.jacocoTestReport, project.tasks.jacocoTestCoverageVerification

jacocoTestCoverageVerification {
    javaProjects().each { p ->
        if ([":api", ":basicdataset"].contains(p.getPath())) {
            additionalSourceDirs files((Set<File>) p.sourceSets.main.allJava.srcDirs)
            additionalClassDirs((FileCollection) p.sourceSets.main.output)
        }
    }

    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: ["**/ai/djl/integration/**"])
        })
    }

    violationRules {
        rule {
            limit {
                if (System.getProperty("ai.djl.default_engine") != null) {
                    minimum = 0.2
                } else {
                    // TODO: improve coverage by running integration tests with 3 engines
                    minimum = 0.4
                }
            }
        }
    }
}
